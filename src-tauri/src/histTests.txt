// #[cfg(test)]
// #[allow(unused)]
// mod tests {
//     use crate::testutils::get_due_event;
    
//     use super::*;

//     static mut HISTORY: Option<History> = None;
    
//     async fn load_history() {
//         unsafe {
//             if HISTORY.is_none() {
//                 kill("test.db").await;
//                 HISTORY = Some(History::new());
//                 HISTORY.as_mut().unwrap().load("test.db").await;
//             }
//             HISTORY.as_mut().unwrap().execute("DELETE FROM DueEvents", Vec::new()).await;
//         }
//     }
    
//     #[tokio::test]
//     async fn test_insert_due_event() {
//         load_history().await;
//         let hist;
//         unsafe { hist = HISTORY.as_mut().unwrap(); }

//         let event = get_due_event();
//         assert!(hist.insert_due_event(event).await.is_ok());
//     }
    
//     #[tokio::test]
//     async fn test_filter_due_events_by_list() {
//         load_history().await;
//         let hist;
//         unsafe { hist = HISTORY.as_mut().unwrap(); }

//         let mut event = get_due_event();
//         hist.insert_due_event(event).await;

//         let mut event = get_due_event();
//         event.size = 0;
//         hist.insert_due_event(event).await;
        
//         let mut event = get_due_event();
//         event.list = "test2".to_string();
//         hist.insert_due_event(event).await;

//         assert!(hist.filter_due_events(Vec::from([
//             "list='test'".to_string()
//         ])).await.unwrap().unwrap().len() == 2);
//     }
    
//     #[tokio::test]
//     async fn test_filter_due_events_by_importance() {
//         load_history().await;
//         let hist;
//         unsafe { hist = HISTORY.as_mut().unwrap(); }

//         let mut event = get_due_event();
//         hist.insert_due_event(event).await;
        
//         let mut event = get_due_event();
//         event.list = "test2".to_string();
//         hist.insert_due_event(event).await;

//         let mut event = get_due_event();
//         event.importance = 4;
//         hist.insert_due_event(event).await;

//         assert!(hist.filter_due_events(Vec::from([
//             "importance=3".to_string()
//         ])).await.unwrap().unwrap().len() == 2);
//     }
    
//     #[tokio::test]
//     async fn test_filter_due_events_by_size() {
//         load_history().await;
//         let hist;
//         unsafe { hist = HISTORY.as_mut().unwrap(); }

//         let mut event = get_due_event();
//         hist.insert_due_event(event).await;
        
//         let mut event = get_due_event();
//         event.size = 3;
//         hist.insert_due_event(event).await;

//         let mut event = get_due_event();
//         event.importance = 4;
//         hist.insert_due_event(event).await;

//         assert!(hist.filter_due_events(Vec::from([
//             "size=2".to_string()
//         ])).await.unwrap().unwrap().len() == 2);
//     }
// }